Class component
- Need to use react component instead
- Called smart or stateful components
- has state and lifecycle methods
- Can use refs to reference elements

Functional components
- basic JS functions (regular or arrow functions)
- refered as dumb or stateless components
- cannot use lifecycle methods(like componentDidMount)
- Doesnt have its own refs
- No render method used in functional components
- Mainly responsible for UI, tipically presentational only(Like an input component)
- Can accept and use props
- Mostly used if you dont need state management
- can use react hooks

Props
- input/parameters that component can accept
- makes your component reusable
- should be treated as an inmutable object inside the component

Style Attributes
- accepts a camel cased JS object
- react will automatically append a px suffix to crtain numeric inlines
- most often used in react applications to add dinamically computed styles at render time

Class creation
- pass a string as the className prop
- mos className depends on props/state to dinamically render the UI
- generally better performance than inline styles

Typescript props
- To use typescript for props we can use "interface"
- Interface defines the schema of what properties an object can toHaveTextContent
- to define an optional property just add a suffix "?"

State
- Similar to props, but private and fully controlled by the component
- Should be treated as inmutable
- To update state, use this.setState() which will trigger a re-render
- if you update the state directly, it will not do a re-renderkid
- You can only update state directly in constructor

setState() function
- Asynchronous
- Multiple calls may be batch for performance gain
- First parameter can be a function or an object
- When using object as first parameter, you only need to add the state you want to update
- Using a function as a first parameter should be used if we want to update based on the previous state
- Second parameter is actually a callback function

Component Lifecycle
----Mounting----

When mounting the component the following functions are to be called
- Constructor: is in charge of initializing the class/component only gets called once
- static getDerivedStateFromProps: gets called before the render in some rare use cases
- render: required as this should return the elements of your component
- componentDidMount: called after the render method and react, it updates the DOm and only gets called once

----Unmounting----

- Invoked immediately before the component is unmounted and destroyed
- Is used to perform neccessary cleanup in this method, such as invalidating timers, cancellingnetwork requests or subscriptions made by componentDidMount()

----Updating----
When updating a component the following methods will execute in order to get our component updated
- static getDerivedStateFromProps(): works on the same way as on mounting, it allow us to set the state depending on the props. Its called before shouldComponentUpdate()
= shouldComponentUpdate(nextProps, nextState): let react know if the component is affected by new state or props. 
    - Gets invoked before the render() method
    - Default is to always do a re-render(true)
    - If we dont want to re-render we can return false
    - it allow us to compare the new props and state with the current props and state
- render(): it allow us to render the component
- getSnapshotBeforeUpdate(prevProps, prevState)
    - gets invoked right before the most recently rendered output is commited to the DOM
    - enables your component to capture some informationfrom the DOM(like an scroll position) before it is potentially changed
    - Value returned by the function will be passed to componentDidUpdate()
- componentDidUpdate(prevProps, prevState, prevSnapshot): 
    - invoked immediately after updating occurs
    - May call setState() but we have to make sure it is wrapped in a condition
    - Mostly used if you want to do something when a property in previous and current props are not equal(for example whe the userID has changed)

----Error Handling----
- Called when ther is an error during rendering, in a lifecycle method, or in the constructor of any child component. The parent componentwill catch the errors of its child component
- static getDerivedStateFromError(error)
    - Gets invoked after an error has been thrown by a descendant component
    - Receives the error that was thrown as a parameter and should return a value to update state (similar to getDerivedStateFromProps)
    - Is called during the render phase, so side-effects are not permited. For those use cases use componentDidCatch()
    - Cannot access component (this objects) here
- componentDidCatch(error, info)
    - Invoked after an error has been thrown by a descendant component
    - Parameters
        - error: error that was thrown (same with getDerivedStateFromError)
        - info: An object with a componentStack key containing information about which component threw the error
    - Called during the commit phase, so side-effects are permitted. For those use cases use componentDid
    - should be used for thing like logging errors